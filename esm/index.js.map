{"version":3,"sources":["../src/index.js"],"names":["DEFAULT_REGEXP","DEFAULT_LOCKPICK","Symbol","mutableMerge","objects","reduce","acc","obj","Object","keys","forEach","key","defaultOverwriteHandler","t","p","v","Error","defaultHandler","object","regexp","map","match","filter","Boolean","privatize","handler","lockpick","newReferenceOnLockpick","overwriteHandler","privateFields","privateObj","withPrivateIndicator","withoutPrivateIndicator","Proxy","get","value","bind","set","find","_w","wout"],"mappings":"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","sourcesContent":["import extend from \"./proxyEntendObject\";\n\nconst DEFAULT_REGEXP = /^@private (.+$)/;\n\nconst DEFAULT_LOCKPICK = Symbol(\"lockpick\");\n\nconst mutableMerge = (...objects) =>\n  objects.reduce((acc, obj) => {\n    Object.keys(obj).forEach(key => (acc[key] = obj[key]));\n    return acc;\n  });\n\nconst defaultOverwriteHandler = (t, p, v) => {\n  throw new Error(`Cannot overwrite private field \"${p}\"`);\n};\n\nconst defaultHandler = (object, regexp) => {\n  const keys = Object.keys(object);\n  return keys\n    .map(key => {\n      const match = key.match(regexp);\n      return match && [key, match[1]];\n    })\n    .filter(Boolean);\n};\n\n/* The goal of making certain fields private could be achieved in a different way, for example\nby checking the fields on the get trap and returning undefined for the private ones. The reason\nfor such a behaviour is explained below.\n*/\n\nconst privatize = (\n  object,\n  {\n    handler = defaultHandler,\n    lockpick = DEFAULT_LOCKPICK,\n    newReferenceOnLockpick = true,\n    overwriteHandler = defaultOverwriteHandler,\n    regexp = DEFAULT_REGEXP\n  } = {}\n) => {\n  const privateFields = handler(object, regexp);\n  const privateObj = privateFields.reduce(\n    (acc, [withPrivateIndicator, withoutPrivateIndicator]) => {\n      acc[withoutPrivateIndicator] = object[withPrivateIndicator];\n      delete object[withPrivateIndicator]; // This is a bit radical, but this way we make sure that there is absolutely no way of accessing these keys\n      return acc;\n    },\n    {}\n  );\n  return new Proxy(object, {\n    get(t, p) {\n      if (p === lockpick)\n        return newReferenceOnLockpick\n          ? { ...privateObj, ...t }\n          : mutableMerge(t, privateObj);\n      const value = t[p];\n      if (typeof value === \"function\") {\n        // Enable methods to access private fields\n        return value.bind(extend(t, [privateObj]));\n      }\n      return value;\n    },\n    set(t, p, v) {\n      if (privateFields.find(([_w, wout]) => p === wout)) {\n        overwriteHandler(t, p, v);\n      } else {\n        t[p] = v;\n      }\n      return true;\n    }\n  });\n};\n\nexport const lockpick = DEFAULT_LOCKPICK;\n\nexport default privatize;\n"],"file":"index.js"}